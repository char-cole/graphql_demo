
# CATEGORY: ITEM
# these Types are loot, and facilitating acquisition of them is the purpose of this API.

"""
Each attire piece has defensive stats, but the primary purpose is aethetics.
"""
type Bloodborne_Attire implements Node {
    id: ID!
    name: String! @unique
    slot: Bloodborne_AttireSlot!
    set: Bloodborne_AttireSet
    """
    If this item can be picked up in the world, this is where it can be found.
    """
    pickUp: Bloodborne_Location
    droppedByBoss: Bloodborne_Boss @relation(path: "Bloodborne_Attire=givesAttire.Bloodborne_Boss")
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_Attire=dropsAttire.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_Attire=givesAttire.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
    requiresDLC: Boolean!
}

"""
Required for purchasing certain weapons, attire, or other items.
May be found, gifted, or looted from corpses.
"""
type Bloodborne_Badge implements Node {
    id: ID!
    name: String! @unique
    trickWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Badge=badge.Bloodborne_Weapon")
    offhandWeapons: [Bloodborne_Offhand!] @relation(path: "Bloodborne_Badge=badge.Bloodborne_Offhand")
    """
    If this item can be picked up in the world, this is where it can be found.
    """
    pickUp: Bloodborne_Location
    droppedByBoss: Bloodborne_Boss @relation(path: "Bloodborne_Badge=givesBadge.Bloodborne_Boss")
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_Badge=dropsBadge.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_Badge=givesBadge.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
    requiresDLC: Boolean!
}

"""
Most gestures exist only for entertainment, but all are included for the sake of completion.
"""
type Bloodborne_Gesture implements Node {
    id: ID!
    name: String! @unique
    rewardFrom: Bloodborne_Encounter! @relation(path: "Bloodborne_Gesture=givesGesture.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
}

"""
An arcane hunter tool used in the hunt.
"""
type Bloodborne_HunterTool implements Node {
    id: ID!
    name: String! @unique
    """
    Required attribute level.
    """
    arcane: Int!
    location: Bloodborne_Location
    quicksilverCost: Int!
    damageType: Bloodborne_Element
    """
    Arcane tools may have unique properties or uses
    """
    special: String
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_HunterTool=dropsTool.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_HunterTool=givesTool.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Any non-badge item required for a quest step or to acquire loot.
"""
type Bloodborne_KeyItem implements Node {
    id: ID!
    name: String! @unique
    """
    If this item can be picked up in the world, this is where it can be found.
    """
    pickUp: Bloodborne_Location
    droppedByBoss: Bloodborne_Boss @relation(path: "Bloodborne_KeyItem=givesKeyItem.Bloodborne_Boss")
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_KeyItem=dropsKeyItem.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_KeyItem=givesKeyItem.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
    isChalice: Boolean!
}

"""
Off-hand equipment is usually firearms, but some are specialized and cannot parry.
"""
type Bloodborne_Offhand implements Node {
    id: ID!
    name: String! @unique
    """
    Required attribute level.
    """
    strength: Int!
    """
    Required attribute level.
    """
    skill: Int!
    """
    Required attribute level.
    """
    bloodtinge: Int!
    """
    Required attribute level.
    """
    arcane: Int!
    """
    Where in the world this Offhand can be picked up.
    """
    location: Bloodborne_Location
    """
    Which Badge, if any, is required to purchase this Offhand.
    """
    badge: Bloodborne_Badge
    """
    An entry of Null indicates that an off-hand weapon either deals physical damage or no damage.
    """
    element: Bloodborne_Element
    imprint: Bloodborne_Shape
    quicksilverCost: Int
    canParry: Boolean!
    """
    Certain off-hand equipment may have unique properties
    """
    special: String
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Only Caryll Runes found in pre-defined locations are currently stored.
Root Chalice Dungeons are not currently supported.
"""
type Bloodborne_Rune implements Node {
    id: ID!
    name: String! @unique
    isCovenant: Boolean
    tier: Int
    effect: String!
    """
    If this item can be picked up in the world, this is where it can be found.
    """
    pickUp: Bloodborne_Location
    droppedByBoss: Bloodborne_Boss @relation(path: "Bloodborne_Rune=givesRune.Bloodborne_Boss")
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_Rune=dropsRune.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_Rune=givesRune.Bloodborne_Encounter")
    lootUnion: Bloodborne_EncounterLootUnion @unique
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
A trick weapon for hunting prey. Used in the main hand, and has a secondary (tricked) form.
"""
type Bloodborne_Weapon implements Node {
    id: ID!
    name: String! @unique
    """
    Required attribute level.
    """
    strength: Int!
    """
    Required attribute level.
    """
    skill: Int!
    """
    Required attribute level.
    """
    bloodtinge: Int!
    """
    Required attribute level.
    """
    arcane: Int!
    """
    If true, an Offhand can be wielded at the same time as the tricked form.
    """
    trickedAllowsOffhand: Boolean!
    """
    Where this weapon can be picked up in the world.
    """
    location: Bloodborne_Location
    """
    Which badge is required to buy this weapon from the bath messengers.
    """
    badge: Bloodborne_Badge
    droppedByBoss: Bloodborne_Boss @relation(path: "Bloodborne_Weapon=givesWeapon.Bloodborne_Boss")
    """
    This field is being replaced by rewardFrom to better indicate that the related type is an Encounter.
    """
    droppedByNPC: Bloodborne_Encounter @relation(path: "Bloodborne_Weapon=dropsWeapon.Bloodborne_Encounter")
    # rewardFrom: Bloodborne_Encounter @relation(path: "Bloodborne_Weapon=givesWeapon.Bloodborne_Encounter")
    """
    Optionally, glyphs may be recorded for easily obtaining alternate versions (online only)
    """
    lostGlyph: String
    """
    Optionally, glyphs may be recorded for easily obtaining alternate versions (online only)
    """
    uncannyGlyph: String
    """
    An array of unique Imprints, one for each version of this weapon.
    """
    imprints: [Bloodborne_Imprint!]! @relation(path: "Bloodborne_Weapon=weapon.Bloodborne_Imprint")
    defaultSerrated: Boolean!
    trickedSerrated: Boolean!
    defaultBlunt: Boolean!
    trickedBlunt: Boolean!
    defaultThrust: Boolean!
    trickedThrust: Boolean!
    defaultRighteous: Boolean!
    trickedRighteous: Boolean!
    """
    Which elemental damage type, if any, can be dealt by this weapon's default form.
    """
    defaultElement: Bloodborne_Element
    """
    Which elemental damage type, if any, can be dealt by this weapon's tricked form.
    """
    trickedElement: Bloodborne_Element
    lootUnion: Bloodborne_EncounterLootUnion @unique
    requiresDLC: Boolean!
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

# CATEGORY: NPC
# these Types are named actors in the world; in general, these Types can be killed.

"""
This is a specific instance of a given boss enemy. Each appearance of a boss is a unique entry in
this Type. The Loot Source type is used to relate Bosses of the same name.
"""
type Bloodborne_Boss implements Node {
    id: ID!
    name: String! @unique
    location: Bloodborne_Location!
    """
    This field identifies the nearest lamp to the boss's fog wall,
    the quickest route to the boss from the Hunter's Dream.
    """
    quickestRoute: Bloodborne_Location
    """
    If true, this Boss must be killed to finish the game.
    """
    mandatory: Boolean!
    isBeast: Boolean!
    isKin: Boolean!
    givesBadge: Bloodborne_Badge
    givesAttire: Bloodborne_Attire
    givesRune: Bloodborne_Rune
    givesWeapon: Bloodborne_Weapon
    givesKeyItem: Bloodborne_KeyItem
    """
    Each Boss that shares a name must be connected to the same Loot Source in this field. For example,
    there are 3 unique Boss entries named Blood-starved Beast, but only one Loot Source with that name.
    """
    connectLootSource: Bloodborne_LootSource
    """
    Notes may contain warnings about boss types or progression.
    """
    notes: String
}

"""
A type to unify all encounters and/or fights with characters or bosses of
the same name. For example, each Undead Giant Boss is connected to the
single Undead Giant Loot Source.
"""
type Bloodborne_LootSource implements Node {
    id: ID!
    name: String! @unique
    """
    An array of all Encounters involving this Loot Source if it's an NPC.
    """
    encounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_LootSource=target.Bloodborne_Encounter")
    """
    An array of each specific occurance of this boss enemy.
    """
    connectBoss: [Bloodborne_Boss!]! @relation(path: "Bloodborne_LootSource=connectLootSource.Bloodborne_Boss")
}

# CATEGORY: WORLD
# these Types are places and events that facilitate the acquisition of ITEM Types

"""
A set of information about where and when an NPC can be found,
as well as what may be acquired.
"""
type Bloodborne_Encounter implements Node {
    id: ID!
    """
    Names should be descriptive, but very brief.
    """
    name: String! @unique
    quest: Bloodborne_Quest!
    """
    Quests are divided into discreet, consecutive steps by the Encounter type.
    """
    step: Int!
    location: Bloodborne_Location!
    """
    The first moon phase in which this Encounter can occur or be triggered.
    """
    firstAvailablePhase: Bloodborne_Phase!
    """
    The first moon phase, if any, in which this Encounter becomes unavailable for the rest of the game.
    """
    terminalPhase: Bloodborne_Phase
    """
    Encounters may have unique requirments to become available that cannot be expressed as a prior
    Encounter. These are avoided whenever possible.
    """
    availableAfter: String
    """
    Many despawn triggers are unverified. This API errs on the side of caution and displays the
    earliest reported triggers.
    """
    likelyUnavailableAfter: String
    """
    This is the NPC the player must either kill or interact with to progress the Quest.
    """
    target: Bloodborne_LootSource
    """
    Some Encounters do not involve an NPC, but require the player to pick up some Key Item.
    """
    pickUp: Bloodborne_KeyItem
    # givesAttire: Bloodborne_Attire
    # givesBadge: Bloodborne_Badge
    givesGesture: Bloodborne_Gesture
    # givesKeyItem: Bloodborne_KeyItem
    # givesRune: Bloodborne_Rune
    # givesTool: Bloodborne_HunterTool
    # givesWeapon: Bloodborne_Weapon
    """
    If "True", killing this character after this encounter will not disrupt any ongoing quests.
    Should be "True" if character must be killed.
    """
    safeToKill: Boolean!
    loot: Bloodborne_EncounterLootUnion @relation(path: "Bloodborne_Encounter=connectEncounter.Bloodborne_EncounterLootUnion")
    dropsAttire: Bloodborne_Attire
    dropsBadge: Bloodborne_Badge
    dropsKeyItem: Bloodborne_KeyItem
    dropsRune: Bloodborne_Rune
    dropsTool: Bloodborne_HunterTool
    dropsWeapon: Bloodborne_Weapon
    """
    Notes may contain reminders for unique requirements of certain encounters
    """
    notes: String
}

"""
The name of a particular lamp as given in-game.
"""
type Bloodborne_Location implements Node {
    id: ID!
    name: String! @unique
    headstone: Bloodborne_Headstone!
    """
    The boss fight, if any, that occurs at this lamp.
    """
    boss: Bloodborne_Boss! @relation(path: "Bloodborne_Location=location.Bloodborne_Boss")
    """
    Notes may contain tips for finding or obtaining item, or warnings about progression
    """
    notes: String
}

"""
Headstones include chalice dungeons and are organized exactly as they are in-game,
such that each is a unique collection of unique lanterns.
The Hunter's Dream is also included for consistency.
"""
type Bloodborne_Headstone implements Node {
    id: ID!
    name: String! @unique
    lanterns: [Bloodborne_Location!] @relation(path: "Bloodborne_Headstone=headstone.Bloodborne_Location")
}

# CATEGORY: MECHANIC
# these Types offer no interaction to the player, but facilitate good organization of other Types

"""
There is no mechanical connection among pieces of a set of attire.
This type exists only as a checklist, as some sets are acquired piecemeal.
"""
type Bloodborne_AttireSet implements Node {
    id: ID!
    name: String! @unique
    """
    The Badge required, if any, to buy this set.
    """
    badge: Bloodborne_Badge
    """
    The NPC that must be killed in order to buy this set.
    """
    requiresKill: Bloodborne_LootSource
    pieces: [Bloodborne_Attire!]! @relation(path: "Bloodborne_AttireSet=set.Bloodborne_Attire")
}

"""
There are four slots for attire: "Headwear", "Garb", "Gloves", and "Trousers".
"""
type Bloodborne_AttireSlot implements Node {
    id: ID!
    slot: String! @unique
}

"""
Some trick weapons, all off-hand weapons, and most tools deal "elemental" (non-physical) damage.
Trick weapons that deal elemental damage cannot have their damage type modified by
items such as Fire Paper.
"""
type Bloodborne_Element implements Node {
    id: ID!
    type: String! @unique
    defaultWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Element=defaultElement.Bloodborne_Weapon")
    trickedWeapons: [Bloodborne_Weapon!] @relation(path: "Bloodborne_Element=trickedElement.Bloodborne_Weapon")
    offhandWeapons: [Bloodborne_Offhand!] @relation(path: "Bloodborne_Element=element.Bloodborne_Offhand")
    tools: [Bloodborne_HunterTool!] @relation(path: "Bloodborne_Element=damageType.Bloodborne_HunterTool")
}

"""
This type is used to organize all possible loot types from an Encounter.
"""
type Bloodborne_EncounterLootUnion implements Node {
    id: ID!
    """
    Name should be Questname Step. For example, "Eileen's Quest 5".
    """
    name: String! @unique
    connectEncounter: Bloodborne_Encounter! @unique
    givesAttire: Bloodborne_Attire @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_Attire")
    givesBadge: Bloodborne_Badge @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_Badge")
    givesGesture: Bloodborne_Gesture @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_Gesture")
    givesKeyItem: Bloodborne_KeyItem @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_KeyItem")
    givesRune: Bloodborne_Rune @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_Rune")
    givesTool: Bloodborne_HunterTool @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_HunterTool")
    givesWeapon: Bloodborne_Weapon @relation(path: "Bloodborne_EncounterLootUnion=lootUnion.Bloodborne_Weapon")
}

"""
A unique combination of blood gem shapes, tied to a specific version of a specific weapon.
"""
type Bloodborne_Imprint implements Node {
    id: ID!
    """
    The format is Version Weapon (for example, Uncanny Kos Parasite).
    """
    name: String! @unique
    weapon: Bloodborne_Weapon!
    version: Bloodborne_WeaponVersion!
    shape1: Bloodborne_Shape!
    shape2: Bloodborne_Shape!
    shape3: Bloodborne_Shape!
}

"""
An irreversible change in the state of the game world, during which
certain events, characters, and enemies are altered.
The phases are "Day", "Night", "Blood Moon", and "End of the Dream".
"""
type Bloodborne_Phase implements Node {
    id: ID!
    name: String! @unique
    """
    An array of Encounters that become unavailable for the rest of the game at the start of this
    moon phase.
    """
    blocksEncounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_Phase=terminalPhase.Bloodborne_Encounter")
}

"""
In this API, a quest is any sequence of actions required to acquire some item.
This list attempts to comprehensively expose any missable actions,
but excludes any sequence that is entirely mandatory.
For example, player must kill Father Gascoigne before killing Amelia to acquire Gold Pendant,
but neither step is possible to miss during progression, so this sequence is not included.
"""
type Bloodborne_Quest implements Node {
    id: ID!
    """
    Quests are generally named for the character that starts them. Whenever possible, Encounters
    are grouped into Quests.
    """
    name: String! @unique
    encounters: [Bloodborne_Encounter!]! @relation(path: "Bloodborne_Quest=quest.Bloodborne_Encounter")
}

"""
The shape of a gem determines which weapons it can be used in and influences its properties.
"""
type Bloodborne_Shape implements Node {
    id: ID!
    """
    Only gems of shape 'Triangle', 'Waning', 'Circle', or 'Droplet' are recorded.
    """
    shape: String! @unique
}

"""
All trick weapons are "Normal", "Lost", or "Uncanny".
"""
type Bloodborne_WeaponVersion implements Node {
    id: ID!
    name: String! @unique
}
